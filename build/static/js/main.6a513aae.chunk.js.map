{"version":3,"sources":["assets/bull.png","components/Rainbow/Rainbow.tsx","components/Logo/Logo.tsx","components/Card/Card.tsx","components/InputField/InputField.tsx","components/Button/Button.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Rainbow","stretch","this","props","className","Component","Logo","src","logo","Card","hasRainbow","classes","children","InputField","placeholder","Button","primary","label","App","style","width","minWidth","margin","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,kC,4RCOtBC,G,uLAEb,IAAMC,IAAYC,KAAKC,MAAMF,QAE7B,OACI,yBAAKG,UAAS,kBAAeH,EAAU,UAAY,SAC/C,yBAAKG,UAAU,kBACf,yBAAKA,UAAU,sBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,yB,GAVMC,c,gBCHhBC,G,uLAEb,OACI,yBAAKF,UAAU,iBACX,yBAAKA,UAAU,OAAOG,IAAKC,W,GAJTH,cCKbI,G,uLAEb,OACI,oCAEIP,KAAKC,MAAMO,WAAc,kBAAC,EAAD,CAAST,SAAS,IAAY,KAE3D,yBAAKG,UAAY,QAAUF,KAAKC,MAAMQ,SAChCT,KAAKC,MAAMS,e,GARKP,cCFbQ,G,uLAEb,OACI,yBAAKT,UAAU,uBACX,2BAAOA,UAAU,aAAaU,YAAaZ,KAAKC,MAAMW,mB,GAJ9BT,cCCnBU,G,uLAEb,OACI,yBAAKX,UAAS,0BAAuBF,KAAKC,MAAMa,QAAU,gBAAkB,KACxE,4BAAQZ,UAAU,UAAUF,KAAKC,MAAMc,Y,GAJnBZ,cCyBrBa,EAxBO,WACpB,OACE,yBAAKd,UAAU,OAIb,kBAAC,EAAD,MAEA,yBAAKe,MAAO,CAACC,MAAO,MAAOC,SAAU,QAASC,OAAQ,WAEpD,kBAAC,EAAD,CAAMZ,YAAU,GACd,wBAAIS,MAAO,CAACI,MAAO,YAAnB,6BACA,kBAAC,EAAD,CAAYT,YAAa,aACzB,kBAAC,EAAD,CAAYA,YAAa,aACzB,kBAAC,EAAD,CAAQG,MAAO,UAAWD,SAAO,KAGnC,kBAAC,EAAD,CAASf,SAAS,OCdNuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6a513aae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bull.45766d1e.png\";","import React, { Component } from 'react'\nimport './Rainbow.scss'\n\ninterface RainbowProps {\n    stretch?: boolean\n}\n\nexport default class Rainbow extends Component<RainbowProps> {\n    render() {\n        const stretch = !!this.props.stretch\n\n        return (\n            <div className={`rainbow ${!!stretch ? 'stretch' : 'null'}`}>\n                <div className=\"color primary\"></div>\n                <div className=\"color accent-dark\"></div>\n                <div className=\"color accent\"></div>\n                <div className=\"color tertiary\"></div>\n                <div className=\"color secondary\"></div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport logo from '../../assets/bull.png'\nimport './Logo.scss'\n\nexport default class Logo extends Component {\n    render() {\n        return (\n            <div className=\"LogoContainer\">\n                <img className=\"Logo\" src={logo}/>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport './Card.scss'\nimport Rainbow from '../Rainbow/Rainbow'\n\ninterface CardProps {\n    classes?: string,\n    hasRainbow?: boolean\n}\n\nexport default class Card extends Component<CardProps> {\n    render() {\n        return (\n            <>\n            \n            { !!this.props.hasRainbow ? (<Rainbow stretch={false}/>) : null}\n            \n            <div className={ 'card ' + this.props.classes}>\n                { this.props.children }\n            </div>\n            \n            </>\n        )\n    }\n}","import React, { Component } from 'react'\nimport './InputField.scss'\n\ninterface InputFieldProps {\n    placeholder: string\n}\n\nexport default class InputField extends Component<InputFieldProps> {\n    render() {\n        return (\n            <div className=\"InputFieldContainer\">\n                <input className=\"InputField\" placeholder={this.props.placeholder}/>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport './Button.scss'\n\ninterface ButtonProps {\n    label: string\n    primary?: boolean\n}\n\nexport default class Button extends Component<ButtonProps> {\n    render() {\n        return (\n            <div className={`ButtonContainer ${!!this.props.primary ? 'ButtonPrimary' : ''}`}>\n                <button className=\"Button\">{this.props.label}</button>\n            </div>\n        )\n    }\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Rainbow from './components/Rainbow/Rainbow';\nimport Logo from './components/Logo/Logo';\nimport Card from './components/Card/Card';\nimport InputField from './components/InputField/InputField';\nimport Button from './components/Button/Button';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n\n      {/* TODO(sami): Add META description */}\n      \n      <Logo/>\n\n      <div style={{width: \"30%\", minWidth: \"300px\", margin: \"0 auto\"}}>\n      \n        <Card hasRainbow>\n          <h1 style={{color: \"#282c34\"}}>welcome back ðŸ“ˆ</h1>\n          <InputField placeholder={'username'}/>\n          <InputField placeholder={'password'}/>\n          <Button label={'Sign in'} primary/>\n        </Card>\n      \n        <Rainbow stretch={true}/>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}